#include "input/lua/keyboard.h"

#include "flat.h"

namespace flat::input::lua::keyboard
{

int open(lua_State* L)
{
	FLAT_LUA_EXPECT_STACK_GROWTH(L, 0);

	static const luaL_Reg Keyboard_lib_s[] = {
		{"isKeyPressed", l_Keyboard_isKeyPressed},

		{nullptr, nullptr}
	};
	luaL_newlib(L, Keyboard_lib_s);

#define KEY_ENTRY(name) {#name, K(name)},
	lua_pushstring(L, "Key");
	static const flat::lua::table::KeyValuePair<int> keysTable[] = {
		KEY_ENTRY(A)
		KEY_ENTRY(B)
		KEY_ENTRY(C)
		KEY_ENTRY(D)
		KEY_ENTRY(E)
		KEY_ENTRY(F)
		KEY_ENTRY(G)
		KEY_ENTRY(H)
		KEY_ENTRY(I)
		KEY_ENTRY(J)
		KEY_ENTRY(K)
		KEY_ENTRY(L)
		KEY_ENTRY(M)
		KEY_ENTRY(N)
		KEY_ENTRY(O)
		KEY_ENTRY(P)
		KEY_ENTRY(Q)
		KEY_ENTRY(R)
		KEY_ENTRY(S)
		KEY_ENTRY(T)
		KEY_ENTRY(U)
		KEY_ENTRY(V)
		KEY_ENTRY(W)
		KEY_ENTRY(X)
		KEY_ENTRY(Y)
		KEY_ENTRY(Z)
		KEY_ENTRY(1)
		KEY_ENTRY(2)
		KEY_ENTRY(3)
		KEY_ENTRY(4)
		KEY_ENTRY(5)
		KEY_ENTRY(6)
		KEY_ENTRY(7)
		KEY_ENTRY(8)
		KEY_ENTRY(9)
		KEY_ENTRY(0)
		KEY_ENTRY(RETURN)
		KEY_ENTRY(ESCAPE)
		KEY_ENTRY(BACKSPACE)
		KEY_ENTRY(TAB)
		KEY_ENTRY(SPACE)
		KEY_ENTRY(MINUS)
		KEY_ENTRY(EQUALS)
		KEY_ENTRY(LEFTBRACKET)
		KEY_ENTRY(RIGHTBRACKET)
		KEY_ENTRY(BACKSLASH)
		KEY_ENTRY(NONUSHASH)
		KEY_ENTRY(SEMICOLON)
		KEY_ENTRY(APOSTROPHE)
		KEY_ENTRY(GRAVE)
		KEY_ENTRY(COMMA)
		KEY_ENTRY(PERIOD)
		KEY_ENTRY(SLASH)
		KEY_ENTRY(CAPSLOCK)
		KEY_ENTRY(F1)
		KEY_ENTRY(F2)
		KEY_ENTRY(F3)
		KEY_ENTRY(F4)
		KEY_ENTRY(F5)
		KEY_ENTRY(F6)
		KEY_ENTRY(F7)
		KEY_ENTRY(F8)
		KEY_ENTRY(F9)
		KEY_ENTRY(F10)
		KEY_ENTRY(F11)
		KEY_ENTRY(F12)
		KEY_ENTRY(PRINTSCREEN)
		KEY_ENTRY(SCROLLLOCK)
		KEY_ENTRY(PAUSE)
		KEY_ENTRY(INSERT)
		KEY_ENTRY(HOME)
		KEY_ENTRY(PAGEUP)
		KEY_ENTRY(DELETE)
		KEY_ENTRY(END)
		KEY_ENTRY(PAGEDOWN)
		KEY_ENTRY(RIGHT)
		KEY_ENTRY(LEFT)
		KEY_ENTRY(DOWN)
		KEY_ENTRY(UP)
		KEY_ENTRY(NUMLOCKCLEAR)
		KEY_ENTRY(KP_DIVIDE)
		KEY_ENTRY(KP_MULTIPLY)
		KEY_ENTRY(KP_MINUS)
		KEY_ENTRY(KP_PLUS)
		KEY_ENTRY(KP_ENTER)
		KEY_ENTRY(KP_1)
		KEY_ENTRY(KP_2)
		KEY_ENTRY(KP_3)
		KEY_ENTRY(KP_4)
		KEY_ENTRY(KP_5)
		KEY_ENTRY(KP_6)
		KEY_ENTRY(KP_7)
		KEY_ENTRY(KP_8)
		KEY_ENTRY(KP_9)
		KEY_ENTRY(KP_0)
		KEY_ENTRY(KP_PERIOD)
		KEY_ENTRY(NONUSBACKSLASH)
		KEY_ENTRY(APPLICATION)
		KEY_ENTRY(POWER)
		KEY_ENTRY(KP_EQUALS)
		KEY_ENTRY(F13)
		KEY_ENTRY(F14)
		KEY_ENTRY(F15)
		KEY_ENTRY(F16)
		KEY_ENTRY(F17)
		KEY_ENTRY(F18)
		KEY_ENTRY(F19)
		KEY_ENTRY(F20)
		KEY_ENTRY(F21)
		KEY_ENTRY(F22)
		KEY_ENTRY(F23)
		KEY_ENTRY(F24)
		KEY_ENTRY(EXECUTE)
		KEY_ENTRY(HELP)
		KEY_ENTRY(MENU)
		KEY_ENTRY(SELECT)
		KEY_ENTRY(STOP)
		KEY_ENTRY(AGAIN)
		KEY_ENTRY(UNDO)
		KEY_ENTRY(CUT)
		KEY_ENTRY(COPY)
		KEY_ENTRY(PASTE)
		KEY_ENTRY(FIND)
		KEY_ENTRY(MUTE)
		KEY_ENTRY(VOLUMEUP)
		KEY_ENTRY(VOLUMEDOWN)
		KEY_ENTRY(KP_COMMA)
		KEY_ENTRY(KP_EQUALSAS400)
		KEY_ENTRY(INTERNATIONAL1)
		KEY_ENTRY(INTERNATIONAL2)
		KEY_ENTRY(INTERNATIONAL3)
		KEY_ENTRY(INTERNATIONAL4)
		KEY_ENTRY(INTERNATIONAL5)
		KEY_ENTRY(INTERNATIONAL6)
		KEY_ENTRY(INTERNATIONAL7)
		KEY_ENTRY(INTERNATIONAL8)
		KEY_ENTRY(INTERNATIONAL9)
		KEY_ENTRY(LANG1)
		KEY_ENTRY(LANG2)
		KEY_ENTRY(LANG3)
		KEY_ENTRY(LANG4)
		KEY_ENTRY(LANG5)
		KEY_ENTRY(LANG6)
		KEY_ENTRY(LANG7)
		KEY_ENTRY(LANG8)
		KEY_ENTRY(LANG9)
		KEY_ENTRY(ALTERASE)
		KEY_ENTRY(SYSREQ)
		KEY_ENTRY(CANCEL)
		KEY_ENTRY(CLEAR)
		KEY_ENTRY(PRIOR)
		KEY_ENTRY(RETURN2)
		KEY_ENTRY(SEPARATOR)
		KEY_ENTRY(OUT)
		KEY_ENTRY(OPER)
		KEY_ENTRY(CLEARAGAIN)
		KEY_ENTRY(CRSEL)
		KEY_ENTRY(EXSEL)
		KEY_ENTRY(KP_00)
		KEY_ENTRY(KP_000)
		KEY_ENTRY(THOUSANDSSEPARATOR)
		KEY_ENTRY(DECIMALSEPARATOR)
		KEY_ENTRY(CURRENCYUNIT)
		KEY_ENTRY(CURRENCYSUBUNIT)
		KEY_ENTRY(KP_LEFTPAREN)
		KEY_ENTRY(KP_RIGHTPAREN)
		KEY_ENTRY(KP_LEFTBRACE)
		KEY_ENTRY(KP_RIGHTBRACE)
		KEY_ENTRY(KP_TAB)
		KEY_ENTRY(KP_BACKSPACE)
		KEY_ENTRY(KP_A)
		KEY_ENTRY(KP_B)
		KEY_ENTRY(KP_C)
		KEY_ENTRY(KP_D)
		KEY_ENTRY(KP_E)
		KEY_ENTRY(KP_F)
		KEY_ENTRY(KP_XOR)
		KEY_ENTRY(KP_POWER)
		KEY_ENTRY(KP_PERCENT)
		KEY_ENTRY(KP_LESS)
		KEY_ENTRY(KP_GREATER)
		KEY_ENTRY(KP_AMPERSAND)
		KEY_ENTRY(KP_DBLAMPERSAND)
		KEY_ENTRY(KP_VERTICALBAR)
		KEY_ENTRY(KP_DBLVERTICALBAR)
		KEY_ENTRY(KP_COLON)
		KEY_ENTRY(KP_HASH)
		KEY_ENTRY(KP_SPACE)
		KEY_ENTRY(KP_AT)
		KEY_ENTRY(KP_EXCLAM)
		KEY_ENTRY(KP_MEMSTORE)
		KEY_ENTRY(KP_MEMRECALL)
		KEY_ENTRY(KP_MEMCLEAR)
		KEY_ENTRY(KP_MEMADD)
		KEY_ENTRY(KP_MEMSUBTRACT)
		KEY_ENTRY(KP_MEMMULTIPLY)
		KEY_ENTRY(KP_MEMDIVIDE)
		KEY_ENTRY(KP_PLUSMINUS)
		KEY_ENTRY(KP_CLEAR)
		KEY_ENTRY(KP_CLEARENTRY)
		KEY_ENTRY(KP_BINARY)
		KEY_ENTRY(KP_OCTAL)
		KEY_ENTRY(KP_DECIMAL)
		KEY_ENTRY(KP_HEXADECIMAL)
		KEY_ENTRY(LCTRL)
		KEY_ENTRY(LSHIFT)
		KEY_ENTRY(LALT)
		KEY_ENTRY(LGUI)
		KEY_ENTRY(RCTRL)
		KEY_ENTRY(RSHIFT)
		KEY_ENTRY(RALT)
		KEY_ENTRY(RGUI)
		KEY_ENTRY(MODE)
		KEY_ENTRY(AUDIONEXT)
		KEY_ENTRY(AUDIOPREV)
		KEY_ENTRY(AUDIOSTOP)
		KEY_ENTRY(AUDIOPLAY)
		KEY_ENTRY(AUDIOMUTE)
		KEY_ENTRY(MEDIASELECT)
		KEY_ENTRY(WWW)
		KEY_ENTRY(MAIL)
		KEY_ENTRY(CALCULATOR)
		KEY_ENTRY(COMPUTER)
		KEY_ENTRY(AC_SEARCH)
		KEY_ENTRY(AC_HOME)
		KEY_ENTRY(AC_BACK)
		KEY_ENTRY(AC_FORWARD)
		KEY_ENTRY(AC_STOP)
		KEY_ENTRY(AC_REFRESH)
		KEY_ENTRY(AC_BOOKMARKS)
		KEY_ENTRY(BRIGHTNESSDOWN)
		KEY_ENTRY(BRIGHTNESSUP)
		KEY_ENTRY(DISPLAYSWITCH)
		KEY_ENTRY(KBDILLUMTOGGLE)
		KEY_ENTRY(KBDILLUMDOWN)
		KEY_ENTRY(KBDILLUMUP)
		KEY_ENTRY(EJECT)
		KEY_ENTRY(SLEEP)
		KEY_ENTRY(APP1)
		KEY_ENTRY(APP2)
		KEY_ENTRY(AUDIOREWIND)
		KEY_ENTRY(AUDIOFASTFORWARD)

		{nullptr, K(UNKNOWN)}
	};
	flat::lua::table::pushTable(L, keysTable);
	lua_settable(L, -3);
#undef KEY_ENTRY

	lua_setglobal(L, "Keyboard");

	return 0;
}

int l_Keyboard_isKeyPressed(lua_State* L)
{
	const Key key = static_cast<Key>(luaL_checkinteger(L, 1));
	const bool isKeyPressed = flat::lua::getFlat(L).input->keyboard->isPressed(key);
	lua_pushboolean(L, isKeyPressed);
	return 1;
}

} // flat::input::lua::keyboard
